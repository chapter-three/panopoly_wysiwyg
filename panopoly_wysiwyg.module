<?php
/**
 * @file
 */

include_once('panopoly_wysiwyg.features.inc');

/**
 * Implementation of hook_init
 */
function panopoly_wysiwyg_init() {
  drupal_add_css(drupal_get_path('module', 'panopoly_wysiwyg') . '/css/panopoly_wysiwyg.css');
  drupal_add_css(drupal_get_path('module', 'panopoly_wysiwyg') . '/css/panopoly-wysiwyg-ie-9-plus.css', array('group' => CSS_DEFAULT, 'browsers' => array('IE' => 'gte IE 9', '!IE' => FALSE), 'preprocess' => FALSE));
}

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function panopoly_wysiwyg_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implementation of hook_wysiwyg_include_directory()
 */
function panopoly_wysiwyg_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      // TODO - we should include the PDW and spellchecker plugin this way instead of 
      // as part of the tinymce library. bonus points if we can figure out how to get 
      // the custom skin loaded here too. 
      return $type;
  }
}


/**
 * Implements of hook_element_info_alter().
 */
function panopoly_wysiwyg_element_info_alter(&$type) {
  // Change text format processing on elements to our version.
  if (isset($type['text_format'])) {
    $type['text_format']['#process'][] = 'panopoly_wysiwyg_filter_process_format';
  }
}

/**
 * Callback for processing the text_format element
 */
function panopoly_wysiwyg_filter_process_format($element) {

  // Set the element above the WYSIWYG textarea
  $element['format']['#weight'] = 1;
  unset($element['format']['format']['#options']['plain_text']);
  unset($element['format']['#type']);
  $element['format']['format']['#title'] = 'Editor: ';
  
  // Remove elements from UID 1 user since better format's permissions cannot
  global $user;
  if ($user->uid == 1) {
    $element['format']['help']['#access'] = FALSE;
    $element['format']['guidelines']['#access'] = FALSE;
  }
  return $element;
}

/**
 * Implementation of hook_module_implements_alter()
 */
function panopoly_wysiwyg_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'wysiwyg_editor_settings_alter') {
    $group = $implementations['panopoly_wysiwyg'];
    unset($implementations['panopoly_wysiwyg']);
    $implementations['panopoly_wysiwyg'] = $group;
  }  
}

/**
 * Implementation of hook_wysiwyg_editor_settings_alter()
 */
function panopoly_wysiwyg_wysiwyg_editor_settings_alter(&$settings, $context) {

  switch($context['editor']['name']) {
    case 'tinymce':

      // Set custom settings
      $settings['skin'] = 'cirkuit';
      $settings['spellchecker_languages'] = '+English=en';
      $settings['dialog_type'] = 'modal';

      // Process a default order for the WYSIWYG
      $enabled_buttons = preg_split('/,/', $settings['theme_advanced_buttons1']);
      $default_buttons = array('bold', 'italic', 'strikethrough', '|', 'bullist', 'numlist', 'blockquote', '|', 'justifyleft', 'justifycenter','justifyright','|','link', 'unlink', 'break', '|', 'fullscreen', 'spellchecker', 'media', 'captionfilter', 'pdw_toggle', 'PAGEBREAK', 'formatselect', '|', 'underline', '|', 'justifyfull', '|', 'forecolor', '|', 'pastetext', 'pasteword', 'removeformat', '|', 'charmap', '|', 'indent', 'outdent', '|', 'undo', 'redo'); 
      foreach($default_buttons as $button) {
        if (in_array($button, $enabled_buttons)) {
          unset($enabled_buttons[array_search($button, $enabled_buttons)]);
        }
        elseif ($button != '|' && $button != 'PAGEBREAK' && $button != 'pdw_toggle' && $button != 'spellchecker') {
          unset($default_buttons[array_search($button, $default_buttons)]);
        }
      }

      // Define the final button settings
      $default_buttons_list = preg_split('/,PAGEBREAK,/', implode(',', $default_buttons));
      $settings['theme_advanced_buttons1'] = $default_buttons_list[0];
      $settings['theme_advanced_buttons2'] = $default_buttons_list[1];
      $settings['theme_advanced_buttons3'] = (count($enabled_buttons) > 0) ? implode(',', $enabled_buttons) : NULL;
      $settings['pdw_toggle_on'] = '1'; // TODO - why can't this be set in the hook_wysiwyg_plugin()?
      $settings['pdw_toggle_toolbars'] = (count($enabled_buttons) > 0) ? '2,3' : '2';
      $settings['plugins'] .= ',spellchecker,pdw,inlinepopups'; 
      $settings['inlinepopups_skin'] = 'oa_inlinepopups';
      break;
    case 'markitup':
      // TODO - this needs to be extended to include the same buttons as part of the standard TinyMCE editor
      break;
  }
}


